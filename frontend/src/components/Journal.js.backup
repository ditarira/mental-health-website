import React, { useState, useEffect } from "react";
import { useAuth } from "../contexts/AuthContext";

const Journal = ({ isEmbedded = false, onStatsUpdate, onNavigateBack }) => {
  const { user } = useAuth();
  const [entries, setEntries] = useState([]);
  const [showNewEntry, setShowNewEntry] = useState(false);
  const [loading, setLoading] = useState(true);
  const [submitting, setSubmitting] = useState(false);
  const [isMobile, setIsMobile] = useState(window.innerWidth <= 768);
  const [selectedEntry, setSelectedEntry] = useState(null);
  const [showDeleteConfirm, setShowDeleteConfirm] = useState(null);

  // Form states
  const [newEntry, setNewEntry] = useState({
    title: "",
    content: "",
    mood: 3,
    tags: "",
    isPrivate: false
  });

  const [searchTerm, setSearchTerm] = useState("");
  const [filterMood, setFilterMood] = useState("");
  const [sortBy, setSortBy] = useState("newest");

  useEffect(() => {
    fetchEntries();
    const handleResize = () => setIsMobile(window.innerWidth <= 768);
    window.addEventListener('resize', handleResize);
    return () => window.removeEventListener('resize', handleResize);
  }, []);

  const fetchEntries = async () => {
    try {
      setLoading(true);
      const token = localStorage.getItem("token");

      const response = await fetch("/api/journal", {
        headers: {
          "Authorization": `Bearer ${token}`,
          "Content-Type": "application/json"
        }
      });

      if (response.ok) {
        const data = await response.json();
        setEntries(data.entries || []);
      } else {
        // Fallback to localStorage
        const localEntries = JSON.parse(localStorage.getItem("journalEntries") || "[]");
        setEntries(localEntries);
      }
    } catch (error) {
      console.error("Error fetching entries:", error);
      // Fallback to localStorage
      const localEntries = JSON.parse(localStorage.getItem("journalEntries") || "[]");
      setEntries(localEntries);
    } finally {
      setLoading(false);
    }
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    setSubmitting(true);

    try {
      const token = localStorage.getItem("token");
      const entryData = {
        title: newEntry.title || "Untitled Entry",
        content: newEntry.content,
        mood: parseInt(newEntry.mood),
        tags: newEntry.tags.split(",").map(tag => tag.trim()).filter(tag => tag),
        isPrivate: newEntry.isPrivate
      };

      const response = await fetch("/api/journal", {
        method: "POST",
        headers: {
          "Authorization": `Bearer ${token}`,
          "Content-Type": "application/json"
        },
        body: JSON.stringify(entryData)
      });

      if (response.ok) {
        const data = await response.json();
        setEntries(prev => [data.entry, ...prev]);
      } else {
        // Fallback: save to localStorage
        const localEntries = JSON.parse(localStorage.getItem("journalEntries") || "[]");
        const newLocalEntry = {
          id: Date.now().toString(),
          title: newEntry.title || "Untitled Entry",
          content: newEntry.content,
          mood: parseInt(newEntry.mood),
          tags: newEntry.tags.split(",").map(tag => tag.trim()).filter(tag => tag),
          isPrivate: newEntry.isPrivate,
          createdAt: new Date().toISOString(),
          updatedAt: new Date().toISOString(),
          userId: user?.id || "local-user"
        };

        localEntries.unshift(newLocalEntry);
        localStorage.setItem("journalEntries", JSON.stringify(localEntries));
        setEntries(localEntries);
      }

      // Reset form
      setNewEntry({
        title: "",
        content: "",
        mood: 3,
        tags: "",
        isPrivate: false
      });
      setShowNewEntry(false);

      if (onStatsUpdate) {
        onStatsUpdate();
      }

      alert("Journal entry saved successfully! ✨");
    } catch (error) {
      console.error("Error saving entry:", error);
      alert("There was an error saving your entry. Please try again.");
    } finally {
      setSubmitting(false);
    }
  };

  const handleDelete = async (entryId) => {
    setShowDeleteConfirm(null);

    try {
      const token = localStorage.getItem("token");

      const response = await fetch(`/api/journal/${entryId}`, {
        method: "DELETE",
        headers: {
          "Authorization": `Bearer ${token}`,
          "Content-Type": "application/json"
        }
      });

      if (response.ok) {
        setEntries(prev => prev.filter(entry => entry.id !== entryId));
      } else {
        // Fallback to localStorage
        const localEntries = JSON.parse(localStorage.getItem("journalEntries") || "[]");
        const filteredEntries = localEntries.filter(entry => entry.id !== entryId);
        localStorage.setItem("journalEntries", JSON.stringify(filteredEntries));
        setEntries(filteredEntries);
      }

      if (onStatsUpdate) {
        onStatsUpdate();
      }

      alert("Entry deleted successfully.");
    } catch (error) {
      console.error("Error deleting entry:", error);
      alert("There was an error deleting your entry. Please try again.");
    }
  };

  const getMoodEmoji = (mood) => {
    const moods = ["😢", "😟", "😐", "😊", "😄"];
    return moods[mood - 1] || "😐";
  };

  const getMoodColor = (mood) => {
    const colors = ["#ef4444", "#f97316", "#eab308", "#22c55e", "#10b981"];
    return colors[mood - 1] || "#eab308";
  };

  const formatDate = (dateString) => {
    const date = new Date(dateString);
    const today = new Date();
    const yesterday = new Date(today);
    yesterday.setDate(yesterday.getDate() - 1);

    if (date.toDateString() === today.toDateString()) return "Today";
    if (date.toDateString() === yesterday.toDateString()) return "Yesterday";

    return date.toLocaleDateString("en-US", {
      month: "long",
      day: "numeric",
      year: date.getFullYear() !== today.getFullYear() ? "numeric" : undefined
    });
  };

  // Filter and sort entries
  const filteredEntries = entries.filter(entry => {
    const matchesSearch = (entry.title || "").toLowerCase().includes(searchTerm.toLowerCase()) ||
                         entry.content.toLowerCase().includes(searchTerm.toLowerCase()) ||
                         (Array.isArray(entry.tags) && entry.tags.some(tag => tag.toLowerCase().includes(searchTerm.toLowerCase())));
    const matchesMood = filterMood === "" || entry.mood.toString() === filterMood;
    return matchesSearch && matchesMood;
  });

  const sortedEntries = [...filteredEntries].sort((a, b) => {
    switch (sortBy) {
      case "oldest":
        return new Date(a.createdAt) - new Date(b.createdAt);
      case "mood-high":
        return b.mood - a.mood;
      case "mood-low":
        return a.mood - b.mood;
      default: // "newest"
        return new Date(b.createdAt) - new Date(a.createdAt);
    }
  });

  if (loading) {
    return (
      <div style={{
        display: "flex",
        justifyContent: "center",
        alignItems: "center",
        height: "50vh",
        fontSize: "1.5rem",
        color: "#667eea"
      }}>
        <div style={{ textAlign: "center" }}>
          <div style={{ 
            fontSize: "3rem", 
            marginBottom: "1rem", 
            animation: "pulse 2s infinite" 
          }}>📝</div>
          <div style={{ 
            fontFamily: "'Inter', sans-serif", 
            fontWeight: "600" 
          }}>
            Loading your journal...
          </div>
        </div>
      </div>
    );
  }

  return (
    <div style={{
      background: isEmbedded ? "transparent" : "linear-gradient(135deg, #667eea 0%, #764ba2 100%)",
      minHeight: isEmbedded ? "auto" : "100vh",
      padding: isEmbedded ? "0" : (isMobile ? "1rem" : "2rem"),
      fontFamily: "'Inter', sans-serif"
    }}>

      {/* Delete Confirmation Modal */}
      {showDeleteConfirm && (
        <div style={{
          position: "fixed",
          top: 0,
          left: 0,
          right: 0,
          bottom: 0,
          background: "rgba(0, 0, 0, 0.6)",
          display: "flex",
          alignItems: "center",
          justifyContent: "center",
          zIndex: 1000,
          backdropFilter: "blur(8px)"
        }}>
          <div style={{
            background: "white",
            borderRadius: "25px",
            padding: "2.5rem",
            maxWidth: "450px",
            width: "90%",
            boxShadow: "0 25px 80px rgba(0,0,0,0.25)",
            border: "1px solid rgba(255, 255, 255, 0.3)"
          }}>
            <div style={{ textAlign: "center", marginBottom: "2rem" }}>
              <div style={{ 
                fontSize: "3rem", 
                marginBottom: "1rem",
                background: "linear-gradient(135deg, #ef4444, #dc2626)",
                borderRadius: "50%",
                width: "80px",
                height: "80px",
                display: "flex",
                alignItems: "center",
                justifyContent: "center",
                margin: "0 auto 1rem auto",
                boxShadow: "0 10px 30px rgba(239, 68, 68, 0.3)"
              }}>
                <span style={{ color: "white" }}>🗑️</span>
              </div>
              <h3 style={{ 
                color: "#1f2937", 
                fontSize: "1.5rem", 
                fontWeight: "700",
                margin: "0 0 0.5rem 0"
              }}>
                Delete Entry
              </h3>
              <p style={{ 
                color: "#6b7280", 
                fontSize: "1rem", 
                lineHeight: "1.6",
                margin: 0
              }}>
                Are you sure you want to delete this journal entry? This action cannot be undone.
              </p>
            </div>
            <div style={{ display: "flex", gap: "1rem", justifyContent: "center" }}>
              <button
                onClick={() => setShowDeleteConfirm(null)}
                style={{
                  background: "rgba(107, 114, 128, 0.1)",
                  border: "2px solid #e5e7eb",
                  color: "#6b7280",
                  borderRadius: "12px",
                  padding: "0.75rem 1.5rem",
                  cursor: "pointer",
                  fontWeight: "600",
                  fontSize: "0.95rem",
                  transition: "all 0.3s ease",
                  fontFamily: "'Inter', sans-serif"
                }}
              >
                Cancel
              </button>
              <button
                onClick={() => handleDelete(showDeleteConfirm)}
                style={{
                  background: "linear-gradient(135deg, #ef4444, #dc2626)",
                  color: "white",
                  border: "none",
                  borderRadius: "12px",
                  padding: "0.75rem 1.5rem",
                  cursor: "pointer",
                  fontWeight: "600",
                  fontSize: "0.95rem",
                  transition: "all 0.3s ease",
                  fontFamily: "'Inter', sans-serif",
                  boxShadow: "0 4px 15px rgba(239, 68, 68, 0.3)"
                }}
              >
                Delete Entry
              </button>
            </div>
          </div>
        </div>
      )}

      <div style={{ maxWidth: "1000px", margin: "0 auto" }}>

        {/* Header - Enhanced Design */}
        <div style={{
          background: "rgba(255, 255, 255, 0.98)",
          borderRadius: "25px",
          padding: isMobile ? "2rem" : "2.5rem",
          marginBottom: "2rem",
          boxShadow: "0 25px 80px rgba(102, 126, 234, 0.15)",
          backdropFilter: "blur(20px)",
          border: "1px solid rgba(255, 255, 255, 0.3)"
        }}>
          <div style={{
            display: "flex",
            justifyContent: "space-between",
            alignItems: "center",
            marginBottom: "1.5rem"
          }}>
            <div>
              <div style={{
                display: "flex",
                alignItems: "center",
                gap: "1rem",
                marginBottom: "0.5rem"
              }}>
                <div style={{
                  background: "linear-gradient(135deg, #667eea, #764ba2)",
                  borderRadius: "18px",
                  padding: "0.8rem",
                  boxShadow: "0 8px 25px rgba(102, 126, 234, 0.3)"
                }}>
                  <span style={{ fontSize: "2rem", color: "white" }}>📝</span>
                </div>
                <h1 style={{
                  fontSize: isMobile ? "2rem" : "2.8rem",
                  fontWeight: "800",
                  background: "linear-gradient(135deg, #667eea, #764ba2)",
                  backgroundClip: "text",
                  WebkitBackgroundClip: "text",
                  WebkitTextFillColor: "transparent",
                  margin: 0,
                  letterSpacing: "-0.02em"
                }}>
                  My Journal
                </h1>
              </div>
              <p style={{
                color: "#6b7280",
                fontSize: "1.1rem",
                margin: 0,
                fontWeight: "500"
              }}>
                Reflect, write, and track your mental wellness journey ✨
              </p>
            </div>
          </div>

          {/* Stats - Enhanced Cards */}
          <div style={{
            display: "grid",
            gridTemplateColumns: isMobile ? "repeat(2, 1fr)" : "repeat(4, 1fr)",
            gap: "1.5rem",
            marginTop: "2rem"
          }}>
            {[
              { label: "Total Entries", value: entries.length, icon: "📊", color: "#667eea" },
              { 
                label: "Avg Mood", 
                value: entries.length > 0 ? (entries.reduce((sum, entry) => sum + entry.mood, 0) / entries.length).toFixed(1) : "0",
                icon: "😊", 
                color: "#22c55e" 
              },
              { 
                label: "Active Days", 
                value: new Set(entries.map(e => new Date(e.createdAt).toDateString())).size,
                icon: "📅", 
                color: "#f59e0b" 
              },
              { 
                label: "Today's Entries", 
                value: entries.filter(e => new Date(e.createdAt).toDateString() === new Date().toDateString()).length,
                icon: "✨", 
                color: "#8b5cf6" 
              }
            ].map((stat, index) => (
              <div key={index} style={{
                background: "linear-gradient(135deg, rgba(255, 255, 255, 0.8), rgba(255, 255, 255, 0.4))",
                borderRadius: "20px",
                padding: "1.5rem",
                textAlign: "center",
                border: "1px solid rgba(255, 255, 255, 0.3)",
                boxShadow: "0 8px 25px rgba(0, 0, 0, 0.08)",
                transition: "all 0.3s ease",
                cursor: "pointer"
              }}>
                <div style={{ fontSize: "2rem", marginBottom: "0.5rem" }}>{stat.icon}</div>
                <div style={{ 
                  fontSize: "2rem", 
                  fontWeight: "800", 
                  color: stat.color,
                  marginBottom: "0.25rem"
                }}>
                  {stat.value}
                </div>
                <div style={{ 
                  fontSize: "0.9rem", 
                  color: "#6b7280",
                  fontWeight: "600"
                }}>
                  {stat.label}
                </div>
              </div>
            ))}
          </div>
        </div>

        {/* New Entry Button - Enhanced */}
        <div style={{
          display: "flex",
          justifyContent: "center",
          marginBottom: "2rem"
        }}>
          <button
            style={{
              background: showNewEntry 
                ? "linear-gradient(135deg, #ef4444, #dc2626)"
                : "linear-gradient(135deg, #667eea, #764ba2)",
              color: "white",
              border: "none",
              borderRadius: "20px",
              padding: "1.2rem 2.5rem",
              cursor: "pointer",
              transition: "all 0.3s ease",
              fontWeight: "700",
              fontSize: "1.1rem",
              boxShadow: showNewEntry 
                ? "0 10px 35px rgba(239, 68, 68, 0.4)"
                : "0 10px 35px rgba(102, 126, 234, 0.4)",
              fontFamily: "'Inter', sans-serif",
              display: "flex",
              alignItems: "center",
              gap: "0.8rem"
            }}
            onClick={() => setShowNewEntry(!showNewEntry)}
          >
            <span style={{ fontSize: "1.3rem" }}>
              {showNewEntry ? "❌" : "✍️"}
            </span>
            {showNewEntry ? "Cancel" : "Write New Entry"}
          </button>
        </div>

        {/* New Entry Form - Enhanced */}
        {showNewEntry && (
          <div style={{
            background: "rgba(255, 255, 255, 0.98)",
            borderRadius: "25px",
            padding: isMobile ? "2rem" : "2.5rem",
            marginBottom: "2rem",
            boxShadow: "0 25px 80px rgba(102, 126, 234, 0.15)",
            backdropFilter: "blur(20px)",
            border: "1px solid rgba(255, 255, 255, 0.3)"
          }}>
            <div style={{
              display: "flex",
              alignItems: "center",
              gap: "1rem",
              marginBottom: "2rem"
            }}>
              <div style={{
                background: "linear-gradient(135deg, #667eea, #764ba2)",
                borderRadius: "15px",
                padding: "0.8rem",
                boxShadow: "0 8px 25px rgba(102, 126, 234, 0.3)"
              }}>
                <span style={{ fontSize: "1.5rem", color: "white" }}>✍️</span>
              </div>
              <h3 style={{
                color: "#1f2937",
                fontSize: "1.8rem",
                fontWeight: "700",
                margin: 0
              }}>
                New Journal Entry
              </h3>
            </div>

            <form onSubmit={handleSubmit}>
              {/* Title */}
              <div style={{ marginBottom: "2rem" }}>
                <label style={{
                  display: "block",
                  fontSize: "1.1rem",
                  fontWeight: "600",
                  color: "#374151",
                  marginBottom: "0.8rem"
                }}>
                  Title (optional)
                </label>
                <input
                  type="text"
                  value={newEntry.title}
                  onChange={(e) => setNewEntry(prev => ({ ...prev, title: e.target.value }))}
                  placeholder="Give your entry a meaningful title..."
                  style={{
                    width: "100%",
                    padding: "1rem 1.2rem",
                    border: "2px solid #e5e7eb",
                    borderRadius: "15px",
                    fontSize: "1rem",
                    outline: "none",
                    transition: "all 0.3s ease",
                    fontFamily: "'Inter', sans-serif",
                    background: "rgba(255, 255, 255, 0.8)"
                  }}
                />
              </div>

              {/* Mood Selector - Enhanced */}
              <div style={{ marginBottom: "2rem" }}>
                <label style={{
                  display: "block",
                  fontSize: "1.1rem",
                  fontWeight: "600",
                  color: "#374151",
                  marginBottom: "0.8rem"
                }}>
                  How are you feeling today? {getMoodEmoji(newEntry.mood)}
                </label>
                <div style={{
                  display: "flex",
                  gap: "0.8rem",
                  flexWrap: "wrap"
                }}>
                  {[1, 2, 3, 4, 5].map(mood => (
                    <button
                      key={mood}
                      type="button"
                      style={{
                        background: newEntry.mood === mood 
                          ? `linear-gradient(135deg, ${getMoodColor(mood)}, ${getMoodColor(mood)}dd)`
                          : "rgba(243, 244, 246, 0.8)",
                        color: newEntry.mood === mood ? "white" : "#6b7280",
                        border: newEntry.mood === mood ? "none" : "2px solid #e5e7eb",
                        borderRadius: "15px",
                        padding: "1rem 1.5rem",
                        cursor: "pointer",
                        transition: "all 0.3s ease",
                        fontWeight: "600",
                        fontSize: "1rem",
                        display: "flex",
                        alignItems: "center",
                        gap: "0.8rem",
                        fontFamily: "'Inter', sans-serif",
                        boxShadow: newEntry.mood === mood 
                          ? `0 8px 25px ${getMoodColor(mood)}40`
                          : "0 2px 8px rgba(0, 0, 0, 0.05)"
                      }}
                      onClick={() => setNewEntry(prev => ({ ...prev, mood }))}
                    >
                      <span style={{ fontSize: "1.2rem" }}>{getMoodEmoji(mood)}</span>
                      <span>{mood}</span>
                    </button>
                  ))}
                </div>
              </div>

              {/* Content Textarea - Enhanced */}
              <div style={{ marginBottom: "2rem" }}>
                <label style={{
                  display: "block",
                  fontSize: "1.1rem",
                  fontWeight: "600",
                  color: "#374151",
                  marginBottom: "0.8rem"
                }}>
                  What's on your mind? <span style={{ color: "#ef4444" }}>*</span>
                </label>
                <textarea
                  value={newEntry.content}
                  onChange={(e) => setNewEntry(prev => ({ ...prev, content: e.target.value }))}
                  placeholder="Share your thoughts, feelings, experiences, or anything that's important to you today... 💭"
                  style={{
                    width: "100%",
                    minHeight: "200px",
                    padding: "1.2rem",
                    border: "2px solid #e5e7eb",
                    borderRadius: "15px",
                    fontSize: "1rem",
                    lineHeight: "1.7",
                    resize: "vertical",
                    outline: "none",
                    transition: "all 0.3s ease",
                    fontFamily: "'Inter', sans-serif",
                    background: "rgba(255, 255, 255, 0.8)"
                  }}
                  required
                ></textarea>
              </div>

              {/* Tags - Enhanced */}
              <div style={{ marginBottom: "2rem" }}>
                <label style={{
                  display: "block",
                  fontSize: "1.1rem",
                  fontWeight: "600",
                  color: "#374151",
                  marginBottom: "0.8rem"
                }}>
                  Tags (comma-separated)
                </label>
                <input
                  type="text"
                  value={newEntry.tags}
                  onChange={(e) => setNewEntry(prev => ({ ...prev, tags: e.target.value }))}
                  placeholder="anxiety, work, family, gratitude, exercise, meditation..."
                  style={{
                    width: "100%",
                    padding: "1rem 1.2rem",
                    border: "2px solid #e5e7eb",
                    borderRadius: "15px",
                    fontSize: "1rem",
                    outline: "none",
                    transition: "all 0.3s ease",
                    fontFamily: "'Inter', sans-serif",
                    background: "rgba(255, 255, 255, 0.8)"
                  }}
                />
              </div>

              {/* Privacy Toggle - Enhanced */}
              <div style={{ marginBottom: "2.5rem" }}>
                <label style={{
                  display: "flex",
                  alignItems: "center",
                  gap: "1rem",
                  cursor: "pointer",
                  fontSize: "1.1rem",
                  color: "#374151",
                  padding: "1rem 1.2rem",
                  background: "rgba(243, 244, 246, 0.6)",
                  borderRadius: "15px",
                  border: "2px solid #e5e7eb",
                  transition: "all 0.3s ease"
                }}>
                  <input
                    type="checkbox"
                    checked={newEntry.isPrivate}
                    onChange={(e) => setNewEntry(prev => ({ ...prev, isPrivate: e.target.checked }))}
                    style={{
                      width: "20px",
                      height: "20px",
                      accentColor: "#667eea"
                    }}
                  />
                  <div style={{ display: "flex", alignItems: "center", gap: "0.5rem" }}>
                    <span style={{ fontSize: "1.2rem" }}>🔒</span>
                    <span style={{ fontWeight: "600" }}>Keep this entry private</span>
                  </div>
                </label>
              </div>

              {/* Submit Button - Enhanced */}
              <button
                type="submit"
                disabled={submitting || !newEntry.content.trim()}
                style={{
                  background: submitting || !newEntry.content.trim()
                    ? "linear-gradient(135deg, #9ca3af, #6b7280)"
                    : "linear-gradient(135deg, #667eea, #764ba2)",
                  color: "white",
                  border: "none",
                  borderRadius: "15px",
                  padding: "1.2rem 2rem",
                  cursor: submitting || !newEntry.content.trim() ? "not-allowed" : "pointer",
                  transition: "all 0.3s ease",
                  fontWeight: "700",
                  fontSize: "1.1rem",
                  width: "100%",
                  fontFamily: "'Inter', sans-serif",
                  boxShadow: submitting || !newEntry.content.trim()
                    ? "0 4px 15px rgba(156, 163, 175, 0.3)"
                    : "0 8px 25px rgba(102, 126, 234, 0.4)",
                  display: "flex",
                  alignItems: "center",
                  justifyContent: "center",
                  gap: "0.8rem"
                }}
              >
                <span style={{ fontSize: "1.3rem" }}>
                  {submitting ? "⏳" : "💾"}
                </span>
                {submitting ? "Saving your thoughts..." : "Save Entry"}
              </button>
            </form>
          </div>
        )}

        {/* Filters and Search - Enhanced */}
        {entries.length > 0 && (
          <div style={{
            background: "rgba(255, 255, 255, 0.98)",
            borderRadius: "20px",
            padding: "2rem",
            marginBottom: "2rem",
            boxShadow: "0 10px 30px rgba(102, 126, 234, 0.1)",
            backdropFilter: "blur(20px)",
            border: "1px solid rgba(255, 255, 255, 0.3)"
          }}>
            <div style={{
              display: "flex",
              alignItems: "center",
              gap: "1rem",
              marginBottom: "1.5rem"
            }}>
              <div style={{
                background: "linear-gradient(135deg, #667eea, #764ba2)",
                borderRadius: "12px",
                padding: "0.6rem",
                boxShadow: "0 6px 20px rgba(102, 126, 234, 0.3)"
              }}>
                <span style={{ fontSize: "1.2rem", color: "white" }}>🔍</span>
              </div>
              <h3 style={{
                color: "#1f2937",
                fontSize: "1.3rem",
                fontWeight: "700",
                margin: 0
              }}>
                Search & Filter
              </h3>
            </div>
            
            <div style={{
              display: "grid",
              gridTemplateColumns: isMobile ? "1fr" : "repeat(3, 1fr)",
              gap: "1.5rem"
            }}>
              <div>
                <label style={{
                  display: "block",
                  fontSize: "1rem",
                  fontWeight: "600",
                  color: "#374151",
                  marginBottom: "0.8rem"
                }}>
                  🔍 Search Entries
                </label>
                <input
                  type="text"
                  value={searchTerm}
                  onChange={(e) => setSearchTerm(e.target.value)}
                  placeholder="Search by title, content, or tags..."
                  style={{
                    width: "100%",
                    padding: "0.9rem 1.1rem",
                    border: "2px solid #e5e7eb",
                    borderRadius: "12px",
                    fontSize: "0.95rem",
                    outline: "none",
                    transition: "all 0.3s ease",
                    fontFamily: "'Inter', sans-serif",
                    background: "rgba(255, 255, 255, 0.8)"
                  }}
                />
              </div>

              <div>
                <label style={{
                  display: "block",
                  fontSize: "1rem",
                  fontWeight: "600",
                  color: "#374151",
                  marginBottom: "0.8rem"
                }}>
                  😊 Filter by Mood
                </label>
                <select
                  value={filterMood}
                  onChange={(e) => setFilterMood(e.target.value)}
                  style={{
                    width: "100%",
                    padding: "0.9rem 1.1rem",
                    border: "2px solid #e5e7eb",
                    borderRadius: "12px",
                    fontSize: "0.95rem",
                    outline: "none",
                    background: "rgba(255, 255, 255, 0.9)",
                    fontFamily: "'Inter', sans-serif",
                    cursor: "pointer"
                  }}
                >
                  <option value="">All Moods</option>
                  <option value="1">😢 Very Sad (1)</option>
                  <option value="2">😟 Sad (2)</option>
                  <option value="3">😐 Neutral (3)</option>
                  <option value="4">😊 Happy (4)</option>
                  <option value="5">😄 Very Happy (5)</option>
                </select>
              </div>

              <div>
                <label style={{
                  display: "block",
                  fontSize: "1rem",
                  fontWeight: "600",
                  color: "#374151",
                  marginBottom: "0.8rem"
                }}>
                  📅 Sort By
                </label>
                <select
                  value={sortBy}
                  onChange={(e) => setSortBy(e.target.value)}
                  style={{
                    width: "100%",
                    padding: "0.9rem 1.1rem",
                    border: "2px solid #e5e7eb",
                    borderRadius: "12px",
                    fontSize: "0.95rem",
                    outline: "none",
                    background: "rgba(255, 255, 255, 0.9)",
                    fontFamily: "'Inter', sans-serif",
                    cursor: "pointer"
                  }}
                >
                  <option value="newest">Newest First</option>
                  <option value="oldest">Oldest First</option>
                  <option value="mood-high">Highest Mood</option>
                  <option value="mood-low">Lowest Mood</option>
                </select>
              </div>
            </div>
          </div>
        )}

        {/* Empty State */}
        {sortedEntries.length === 0 && (
          <div style={{
            background: "rgba(255, 255, 255, 0.98)",
            borderRadius: "25px",
            padding: isMobile ? "3rem 2rem" : "4rem 3rem",
            textAlign: "center",
            boxShadow: "0 20px 60px rgba(102, 126, 234, 0.15)",
            backdropFilter: "blur(20px)",
            border: "1px solid rgba(255, 255, 255, 0.3)"
          }}>
            <div style={{
              background: "linear-gradient(135deg, #667eea, #764ba2)",
              borderRadius: "25px",
              padding: "2rem",
              marginBottom: "2rem",
              display: "inline-block",
              boxShadow: "0 15px 40px rgba(102, 126, 234, 0.3)"
            }}>
              <span style={{ fontSize: "4rem", color: "white" }}>📝</span>
            </div>
            <h3 style={{
              color: "#1f2937",
              fontSize: "2rem",
              fontWeight: "800",
              marginBottom: "1rem",
              letterSpacing: "-0.01em"
            }}>
              Start Your Journal Journey
            </h3>
            <p style={{
              color: "#6b7280",
              fontSize: "1.2rem",
              marginBottom: "2.5rem",
              lineHeight: "1.7",
              maxWidth: "500px",
              margin: "0 auto 2.5rem auto"
            }}>
              Your thoughts and feelings matter. Begin documenting your mental health journey by writing your first entry.
            </p>
            <button
              style={{
                background: "linear-gradient(135deg, #667eea, #764ba2)",
                color: "white",
                border: "none",
                borderRadius: "20px",
                padding: "1.2rem 2.5rem",
                cursor: "pointer",
                transition: "all 0.3s ease",
                fontWeight: "700",
                fontSize: "1.1rem",
                fontFamily: "'Inter', sans-serif",
                boxShadow: "0 10px 35px rgba(102, 126, 234, 0.4)",
                display: "flex",
                alignItems: "center",
                gap: "0.8rem",
                margin: "0 auto"
              }}
              onClick={() => setShowNewEntry(true)}
            >
              <span style={{ fontSize: "1.3rem" }}>✍️</span>
              Write Your First Entry
            </button>
          </div>
        )}

        {/* Entries List - Enhanced */}
        <div style={{
          display: "flex",
          flexDirection: "column",
          gap: "2rem"
        }}>
          {sortedEntries.map(entry => (
            <div key={entry.id} style={{
              background: "rgba(255, 255, 255, 0.98)",
              borderRadius: "25px",
              padding: isMobile ? "2rem" : "2.5rem",
              boxShadow: "0 15px 40px rgba(102, 126, 234, 0.12)",
              backdropFilter: "blur(20px)",
              borderLeft: `6px solid ${getMoodColor(entry.mood)}`,
              transition: "all 0.3s ease",
              cursor: "pointer",
              border: "1px solid rgba(255, 255, 255, 0.3)",
              position: "relative",
              overflow: "hidden"
            }}
            onClick={() => setSelectedEntry(selectedEntry === entry.id ? null : entry.id)}>

              {/* Entry Header - Enhanced */}
              <div style={{
                display: "flex",
                justifyContent: "space-between",
                alignItems: "flex-start",
                marginBottom: "1.5rem"
              }}>
                <div style={{
                  display: "flex",
                  alignItems: "center",
                  gap: "1.5rem"
                }}>
                  <div style={{
                    background: `linear-gradient(135deg, ${getMoodColor(entry.mood)}, ${getMoodColor(entry.mood)}dd)`,
                    borderRadius: "20px",
                    padding: "1rem",
                    boxShadow: `0 8px 25px ${getMoodColor(entry.mood)}40`,
                    minWidth: "70px",
                    minHeight: "70px",
                    display: "flex",
                    alignItems: "center",
                    justifyContent: "center"
                  }}>
                    <span style={{ fontSize: "2.5rem", color: "white" }}>
                      {getMoodEmoji(entry.mood)}
                    </span>
                  </div>
                  <div>
                    {entry.title && (
                      <div style={{
                        fontSize: "1.6rem",
                        fontWeight: "800",
                        color: "#1f2937",
                        marginBottom: "0.5rem",
                        letterSpacing: "-0.01em"
                      }}>
                        {entry.title}
                      </div>
                    )}
                    <div style={{
                      fontSize: "1.3rem",
                      fontWeight: "700",
                      color: "#374151",
                      marginBottom: "0.5rem"
                    }}>
                      {formatDate(entry.createdAt)}
                    </div>
                    <div style={{
                      display: "flex",
                      alignItems: "center",
                      gap: "1.5rem",
                      fontSize: "0.95rem",
                      color: "#6b7280",
                      fontWeight: "500"
                    }}>
                      <span style={{ 
                        background: `linear-gradient(135deg, ${getMoodColor(entry.mood)}20, ${getMoodColor(entry.mood)}10)`,
                        padding: "0.3rem 0.8rem",
                        borderRadius: "8px",
                        border: `1px solid ${getMoodColor(entry.mood)}30`
                      }}>
                        Mood: {entry.mood}/5
                      </span>
                      {entry.isPrivate && (
                        <span style={{
                          background: "linear-gradient(135deg, #6b728020, #6b728010)",
                          padding: "0.3rem 0.8rem",
                          borderRadius: "8px",
                          border: "1px solid #6b728030",
                          display: "flex",
                          alignItems: "center",
                          gap: "0.3rem"
                        }}>
                          🔒 Private
                        </span>
                      )}
                      <span>{new Date(entry.createdAt).toLocaleTimeString("en-US", { hour: "2-digit", minute: "2-digit" })}</span>
                    </div>
                  </div>
                </div>

                <button
                  style={{
                    background: "linear-gradient(135deg, #ef444420, #dc262610)",
                    border: "1px solid #ef444430",
                    cursor: "pointer",
                    fontSize: "1.3rem",
                    padding: "0.8rem",
                    borderRadius: "12px",
                    transition: "all 0.3s ease",
                    color: "#ef4444"
                  }}
                  onClick={(e) => {
                    e.stopPropagation();
                    setShowDeleteConfirm(entry.id);
                  }}
                  title="Delete entry"
                >
                  🗑️
                </button>
              </div>

              {/* Entry Content - Enhanced */}
              <div style={{
                color: "#374151",
                lineHeight: "1.8",
                fontSize: "1.05rem",
                marginBottom: "1.5rem",
                maxHeight: selectedEntry === entry.id ? "none" : "120px",
                overflow: "hidden",
                position: "relative",
                fontWeight: "400"
              }}>
                {entry.content}
                {selectedEntry !== entry.id && entry.content.length > 200 && (
                  <div style={{
                    position: "absolute",
                    bottom: 0,
                    left: 0,
                    right: 0,
                    height: "40px",
                    background: "linear-gradient(transparent, rgba(255,255,255,0.98))",
                    display: "flex",
                    alignItems: "flex-end",
                    justifyContent: "center",
                    fontSize: "0.9rem",
                    color: "#667eea",
                    fontWeight: "600"
                  }}>
                    Click to read more...
                  </div>
                )}
              </div>

              {/* Tags - Enhanced */}
              {Array.isArray(entry.tags) && entry.tags.length > 0 && (
                <div style={{
                  display: "flex",
                  gap: "0.8rem",
                  flexWrap: "wrap",
                  marginBottom: "1rem"
                }}>
                  {entry.tags.map((tag, index) => (
                    <span key={index} style={{
                      background: "linear-gradient(135deg, #667eea, #764ba2)",
                      color: "white",
                      padding: "0.4rem 1rem",
                      borderRadius: "20px",
                      fontSize: "0.85rem",
                      fontWeight: "600",
                      boxShadow: "0 4px 15px rgba(102, 126, 234, 0.3)",
                      border: "1px solid rgba(255, 255, 255, 0.2)"
                    }}>
                      #{tag}
                    </span>
                  ))}
                </div>
              )}

              {/* Expand/Collapse Indicator - Enhanced */}
              <div style={{
                textAlign: "center",
                marginTop: "1.5rem",
                color: "#667eea",
                fontSize: "0.95rem",
                fontWeight: "600",
                padding: "0.8rem",
                background: "linear-gradient(135deg, #667eea10, #764ba210)",
                borderRadius: "12px",
                border: "1px solid #667eea20"
              }}>
                {selectedEntry === entry.id ? "⬆️ Click to collapse" : "⬇️ Click to read more"}
              </div>
            </div>
          ))}
        </div>
      </div>
    </div>
  );
};

export default Journal;
