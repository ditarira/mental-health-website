import React, { useState, useEffect, useRef } from 'react';
import { useAuth } from '../contexts/AuthContext';

const BreathingExercises = () => {
  const { user } = useAuth();
  const [currentTechnique, setCurrentTechnique] = useState('478');
  const [isActive, setIsActive] = useState(false);
  const [phase, setPhase] = useState('ready');
  const [countdown, setCountdown] = useState(0);
  const [cycle, setCycle] = useState(0);
  const [sessionStartTime, setSessionStartTime] = useState(null);
  const [totalSessions, setTotalSessions] = useState(0);
  const intervalRef = useRef(null);

  const techniques = {
    '478': {
      name: '4-7-8',
      description: 'Inhale 4, hold 7, exhale 8. Perfect for relaxation.',
      targetCycles: 4,
      phases: [
        { name: 'inhale', duration: 4, instruction: 'Breathe in through your nose...' },
        { name: 'hold', duration: 7, instruction: 'Hold your breath...' },
        { name: 'exhale', duration: 8, instruction: 'Exhale slowly through your mouth...' }
      ]
    },
    'box': {
      name: 'Box',
      description: 'Equal 4-count rhythm. Navy SEALs technique.',
      targetCycles: 6,
      phases: [
        { name: 'inhale', duration: 4, instruction: 'Breathe in slowly...' },
        { name: 'hold', duration: 4, instruction: 'Hold your breath...' },
        { name: 'exhale', duration: 4, instruction: 'Breathe out slowly...' },
        { name: 'hold', duration: 4, instruction: 'Hold empty...' }
      ]
    },
    'deep': {
      name: 'Deep',
      description: 'Simple 6-6 breathing for relaxation.',
      targetCycles: 8,
      phases: [
        { name: 'inhale', duration: 6, instruction: 'Take a deep breath in...' },
        { name: 'exhale', duration: 6, instruction: 'Slowly breathe out...' }
      ]
    },
    'calm': {
      name: 'Calm',
      description: 'Extended exhale for stress relief.',
      targetCycles: 6,
      phases: [
        { name: 'inhale', duration: 4, instruction: 'Breathe in gently...' },
        { name: 'exhale', duration: 8, instruction: 'Long, slow exhale...' }
      ]
    },
    'energy': {
      name: 'Energy',
      description: 'Quick breathing for alertness.',
      targetCycles: 10,
      phases: [
        { name: 'inhale', duration: 2, instruction: 'Quick breath in...' },
        { name: 'exhale', duration: 2, instruction: 'Quick breath out...' }
      ]
    }
  };

  useEffect(() => {
    loadSessionCount();
  }, []);

  useEffect(() => {
    if (isActive && phase !== 'ready' && phase !== 'completed') {
      intervalRef.current = setInterval(() => {
        setCountdown(prev => {
          if (prev <= 1) {
            moveToNextPhase();
            return 0;
          }
          return prev - 1;
        });
      }, 1000);
    } else {
      clearInterval(intervalRef.current);
    }
    return () => clearInterval(intervalRef.current);
  }, [isActive, phase]);

  const loadSessionCount = () => {
    try {
      const sessions = JSON.parse(localStorage.getItem('breathingSessions') || '[]');
      setTotalSessions(sessions.length);
    } catch (error) {
      console.error('Error loading sessions:', error);
    }
  };

  const saveBreathingSession = (completed = false) => {
    if (!sessionStartTime) return;

    const endTime = new Date();
    const duration = Math.floor((endTime - sessionStartTime) / 1000);
    
    const session = {
      id: Date.now(),
      userId: user?.id || 'anonymous',
      technique: currentTechnique,
      duration: duration,
      completed: completed,
      cyclesCompleted: cycle,
      targetCycles: techniques[currentTechnique].targetCycles,
      createdAt: endTime.toISOString(),
      techniqueName: techniques[currentTechnique].name
    };

    try {
      const existingSessions = JSON.parse(localStorage.getItem('breathingSessions') || '[]');
      existingSessions.push(session);
      localStorage.setItem('breathingSessions', JSON.stringify(existingSessions));
      setTotalSessions(existingSessions.length);

      if (completed) {
        setTimeout(() => {
          alert('🎉 Session Complete! You completed ' + cycle + ' cycles.\n\nTotal sessions: ' + existingSessions.length);
        }, 500);
      }
    } catch (error) {
      console.error('Error saving session:', error);
    }
  };

  const moveToNextPhase = () => {
    const currentPhases = techniques[currentTechnique].phases;
    const currentPhaseIndex = currentPhases.findIndex(p => p.name === phase);
    
    if (currentPhaseIndex < currentPhases.length - 1) {
      const nextPhase = currentPhases[currentPhaseIndex + 1];
      setPhase(nextPhase.name);
      setCountdown(nextPhase.duration);
    } else {
      const newCycle = cycle + 1;
      setCycle(newCycle);
      
      if (newCycle >= techniques[currentTechnique].targetCycles) {
        setIsActive(false);
        setPhase('completed');
        saveBreathingSession(true);
        return;
      }
      
      const firstPhase = currentPhases[0];
      setPhase(firstPhase.name);
      setCountdown(firstPhase.duration);
    }
  };

  const startExercise = () => {
    const firstPhase = techniques[currentTechnique].phases[0];
    setIsActive(true);
    setPhase(firstPhase.name);
    setCountdown(firstPhase.duration);
    setCycle(1);
    setSessionStartTime(new Date());
  };

  const stopExercise = () => {
    if (sessionStartTime && cycle > 0) {
      saveBreathingSession(false);
    }
    
    setIsActive(false);
    setPhase('ready');
    setCountdown(0);
    setCycle(0);
    setSessionStartTime(null);
    clearInterval(intervalRef.current);
  };

  const resetExercise = () => {
    stopExercise();
  };

  const getCurrentInstruction = () => {
    if (phase === 'ready') {
      return 'Select technique and click Begin';
    }
    if (phase === 'completed') {
      return 'Session Complete!';
    }
    const currentPhaseData = techniques[currentTechnique].phases.find(p => p.name === phase);
    return currentPhaseData ? currentPhaseData.instruction : '';
  };

  const getCircleScale = () => {
    if (phase === 'inhale') return 1.5;
    if (phase === 'hold') return 1.5;
    if (phase === 'exhale') return 1.0;
    return 1.0;
  };

  return (
    <div style={{paddingTop: '100px', minHeight: '100vh'}}>
      {/* Hero Section */}
      <section className="breathing" style={{padding: '4rem 0'}}>
        <div className="container">
          <div className="breathing-content">
            <h2 className="breathing-title" style={{marginBottom: '2rem'}}>🧘 Breathing Studio</h2>
            <p className="breathing-subtitle" style={{marginBottom: '3rem'}}>
              Interactive breathing techniques for wellness
            </p>
            
            {/* Mobile responsive grid layout */}
            <div style={{
              display: 'grid',
              gridTemplateColumns: window.innerWidth > 768 ? '1fr 1fr 1fr' : '1fr',
              gap: '2rem',
              marginBottom: '3rem',
              alignItems: 'start'
            }}>
              
              {/* Left Column - Technique Selection */}
              <div>
                <h3 style={{color: 'white', marginBottom: '1.5rem', textAlign: 'center'}}>
                  Choose Technique:
                </h3>
                <div style={{display: 'flex', flexDirection: 'column', gap: '1rem'}}>
                  {Object.entries(techniques).map(([key, technique]) => (
                    <button
                      key={key}
                      onClick={() => {
                        setCurrentTechnique(key);
                        resetExercise();
                      }}
                      disabled={isActive}
                      style={{
                        padding: '1rem',
                        borderRadius: '15px',
                        border: currentTechnique === key ? '3px solid white' : '2px solid rgba(255,255,255,0.3)',
                        backgroundColor: currentTechnique === key ? 'white' : 'rgba(255,255,255,0.2)',
                        color: currentTechnique === key ? 'var(--primary)' : 'white',
                        cursor: isActive ? 'not-allowed' : 'pointer',
                        fontWeight: '600',
                        opacity: isActive && currentTechnique !== key ? 0.5 : 1,
                        textAlign: 'center'
                      }}
                    >
                      <div style={{fontWeight: 'bold', marginBottom: '0.5rem'}}>{technique.name}</div>
                      <div style={{fontSize: '0.85rem', opacity: 0.9}}>{technique.description}</div>
                    </button>
                  ))}
                </div>
              </div>

              {/* Center Column - Breathing Circle & Instructions */}
              <div style={{textAlign: 'center'}}>
                <div style={{marginBottom: '2rem', color: 'white', minHeight: '3rem'}}>
                  <div style={{fontSize: '1.2rem', marginBottom: '1rem'}}>
                    {getCurrentInstruction()}
                  </div>
                  {isActive && phase !== 'completed' && (
                    <div>
                      <div style={{fontSize: '2rem', fontWeight: 'bold', marginBottom: '0.5rem'}}>
                        {countdown > 0 ? countdown : ''}
                      </div>
                      <div style={{fontSize: '1rem'}}>
                        Cycle {cycle} of {techniques[currentTechnique].targetCycles}
                      </div>
                    </div>
                  )}
                </div>

                {/* Breathing Circle */}
                <div style={{
                  position: 'relative',
                  width: '300px',
                  height: '300px',
                  margin: '0 auto 2rem'
                }}>
                  <div 
                    style={{
                      position: 'absolute',
                      top: '50%',
                      left: '50%',
                      transform: 'translate(-50%, -50%) scale(' + getCircleScale() + ')',
                      width: '200px',
                      height: '200px',
                      backgroundColor: 'rgba(255, 255, 255, 0.3)',
                      borderRadius: '50%',
                      transition: isActive ? 'transform ' + (countdown > 0 ? countdown : 1) + 's ease-in-out' : 'transform 0.5s ease'
                    }}
                  />
                  <div 
                    style={{
                      position: 'absolute',
                      top: '50%',
                      left: '50%',
                      transform: 'translate(-50%, -50%)',
                      width: '200px',
                      height: '200px',
                      backgroundColor: phase === 'completed' ? '#4CAF50' : 'rgba(255, 255, 255, 0.8)',
                      borderRadius: '50%',
                      display: 'flex',
                      alignItems: 'center',
                      justifyContent: 'center',
                      fontSize: '1.2rem',
                      color: phase === 'completed' ? 'white' : 'var(--dark)',
                      fontWeight: '600',
                      boxShadow: '0 0 30px rgba(0, 0, 0, 0.1)'
                    }}
                  >
                    {phase === 'ready' ? 'Ready' : 
                     phase === 'completed' ? '✓' : 
                     phase.charAt(0).toUpperCase() + phase.slice(1)}
                  </div>
                </div>

                {/* Controls */}
                <div style={{display: 'flex', gap: '1rem', justifyContent: 'center', flexWrap: 'wrap'}}>
                  {!isActive && phase !== 'completed' ? (
                    <button onClick={startExercise} className="btn" style={{fontSize: '1.1rem', padding: '1rem 2rem'}}>
                      🚀 Begin
                    </button>
                  ) : phase === 'completed' ? (
                    <button onClick={resetExercise} className="btn" style={{fontSize: '1.1rem', padding: '1rem 2rem'}}>
                      Start New Session
                    </button>
                  ) : (
                    <button onClick={stopExercise} className="btn" style={{backgroundColor: '#dc3545'}}>
                      ⏹️ Stop
                    </button>
                  )}
                </div>
              </div>

              {/* Right Column - Session Stats & Benefits */}
              <div>
                <h3 style={{color: 'white', marginBottom: '1.5rem', textAlign: 'center'}}>
                  Session Stats:
                </h3>
                
                <div style={{
                  backgroundColor: 'rgba(255,255,255,0.1)',
                  padding: '1.5rem',
                  borderRadius: '15px',
                  marginBottom: '2rem',
                  textAlign: 'center',
                  color: 'white'
                }}>
                  <div style={{fontSize: '2rem', fontWeight: 'bold', marginBottom: '0.5rem'}}>
                    {totalSessions}
                  </div>
                  <div style={{marginBottom: '1rem'}}>Sessions Completed</div>
                  
                  <div style={{fontSize: '1.5rem', fontWeight: 'bold', marginBottom: '0.5rem'}}>
                    {cycle}
                  </div>
                  <div style={{marginBottom: '1rem'}}>Cycles:</div>
                  
                  <div style={{fontSize: '1.2rem', fontWeight: 'bold'}}>
                    {countdown > 0 ? '0:' + (countdown < 10 ? '0' + countdown : countdown) : '0:00'}
                  </div>
                  <div>Time:</div>
                </div>

                <div style={{
                  backgroundColor: 'rgba(255,255,255,0.1)',
                  padding: '1.5rem',
                  borderRadius: '15px',
                  color: 'white'
                }}>
                  <h4 style={{marginBottom: '1rem', color: 'white'}}>Benefits:</h4>
                  <ul style={{fontSize: '0.9rem', lineHeight: '1.6', listStyle: 'none', padding: 0}}>
                    <li>• Reduces anxiety</li>
                    <li>• Improves sleep</li>
                    <li>• Natural sedative</li>
                    <li>• Calms nerves</li>
                  </ul>
                </div>
              </div>
            </div>
          </div>
        </div>
      </section>

      {/* Benefits Section - Mobile Responsive */}
      <section style={{padding: '4rem 0', backgroundColor: 'white'}}>
        <div className="container">
          <h2 style={{textAlign: 'center', marginBottom: '3rem', color: 'var(--dark)'}}>Benefits of Breathing Exercises</h2>
          <div style={{
            display: 'grid', 
            gridTemplateColumns: 'repeat(auto-fit, minmax(250px, 1fr))', 
            gap: '2rem'
          }}>
            <div style={{textAlign: 'center', padding: '2rem', backgroundColor: 'var(--light)', borderRadius: '15px'}}>
              <div style={{fontSize: '3rem', marginBottom: '1rem'}}>😌</div>
              <h3 style={{marginBottom: '1rem'}}>Reduces Stress</h3>
              <p>Activates your body's relaxation response and lowers cortisol levels.</p>
            </div>
            <div style={{textAlign: 'center', padding: '2rem', backgroundColor: 'var(--light)', borderRadius: '15px'}}>
              <div style={{fontSize: '3rem', marginBottom: '1rem'}}>🧠</div>
              <h3 style={{marginBottom: '1rem'}}>Improves Focus</h3>
              <p>Increases oxygen to the brain and enhances concentration and mental clarity.</p>
            </div>
            <div style={{textAlign: 'center', padding: '2rem', backgroundColor: 'var(--light)', borderRadius: '15px'}}>
              <div style={{fontSize: '3rem', marginBottom: '1rem'}}>😴</div>
              <h3 style={{marginBottom: '1rem'}}>Better Sleep</h3>
              <p>Calms the nervous system and prepares your body for restful sleep.</p>
            </div>
            <div style={{textAlign: 'center', padding: '2rem', backgroundColor: 'var(--light)', borderRadius: '15px'}}>
              <div style={{fontSize: '3rem', marginBottom: '1rem'}}>❤️</div>
              <h3 style={{marginBottom: '1rem'}}>Heart Health</h3>
              <p>Lowers blood pressure and improves cardiovascular function.</p>
            </div>
          </div>
        </div>
      </section>
    </div>
  );
};

export default BreathingExercises;
