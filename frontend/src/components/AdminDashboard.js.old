import React, { useState, useEffect, useContext } from 'react';
import { AuthContext } from '../contexts/AuthContext';
import './AdminDashboard.css';

const AdminDashboard = () => {
  const { user, token } = useContext(AuthContext);
  const [stats, setStats] = useState({
    totalUsers: 0,
    totalJournalEntries: 0,
    totalBreathingSessions: 0,
    activeUsers: 0
  });
  const [users, setUsers] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [activeTab, setActiveTab] = useState('overview');

  // Use environment variable with fallback
  const API_BASE = process.env.REACT_APP_API_URL || 'https://mental-health-backend-2mtp.onrender.com';

  const fetchAdminData = async () => {
    try {
      setLoading(true);
      setError(null);

      if (!token) {
        throw new Error('No authentication token found');
      }

      const config = {
        method: 'GET',
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        }
      };

      console.log('Fetching admin data from:', API_BASE);

      // Fetch stats
      try {
        const statsResponse = await fetch(`${API_BASE}/api/admin/stats`, config);
        console.log('Stats response status:', statsResponse.status);
        
        if (!statsResponse.ok) {
          throw new Error(`Stats request failed: ${statsResponse.status} ${statsResponse.statusText}`);
        }
        
        const statsData = await statsResponse.json();
        console.log('Stats data received:', statsData);
        
        if (statsData.success && statsData.data) {
          setStats({
            totalUsers: statsData.data.totalUsers || 0,
            totalJournalEntries: statsData.data.totalJournalEntries || 0,
            totalBreathingSessions: statsData.data.totalBreathingSessions || 0,
            activeUsers: statsData.data.activeUsers || 0
          });
        } else {
          console.error('Invalid stats data structure:', statsData);
          setError('Invalid stats data received');
        }
      } catch (err) {
        console.error('Stats fetch error:', err);
        setError(`Failed to fetch stats: ${err.message}`);
      }

      // Fetch users
      try {
        const usersResponse = await fetch(`${API_BASE}/api/admin/users`, config);
        console.log('Users response status:', usersResponse.status);
        
        if (!usersResponse.ok) {
          throw new Error(`Users request failed: ${usersResponse.status} ${usersResponse.statusText}`);
        }
        
        const usersData = await usersResponse.json();
        console.log('Users data received:', usersData);
        
        if (usersData.success && Array.isArray(usersData.data)) {
          setUsers(usersData.data);
        } else {
          console.error('Invalid users data structure:', usersData);
          setError('Invalid users data received');
        }
      } catch (err) {
        console.error('Users fetch error:', err);
        setError(`Failed to fetch users: ${err.message}`);
      }

    } catch (error) {
      console.error('Admin data fetch error:', error);
      setError(error.message);
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    if (user && token) {
      fetchAdminData();
      
      // Auto-refresh every 30 seconds
      const interval = setInterval(fetchAdminData, 30000);
      return () => clearInterval(interval);
    }
  }, [user, token]);

  const handleRefresh = () => {
    fetchAdminData();
  };

  if (!user || user.role !== 'ADMIN') {
    return (
      <div className="admin-dashboard">
        <div className="access-denied">
          <h2>Access Denied</h2>
          <p>You don't have admin privileges to view this page.</p>
        </div>
      </div>
    );
  }

  if (loading) {
    return (
      <div className="admin-dashboard">
        <div className="loading-container">
          <div className="loading-spinner"></div>
          <p>Loading admin dashboard...</p>
        </div>
      </div>
    );
  }

  return (
    <div className="admin-dashboard">
      <div className="admin-header">
        <div className="header-content">
          <div className="admin-title">
            <h1>Admin Dashboard</h1>
            <p>Welcome back, Admin! Monitor your MindfulMe platform</p>
          </div>
          <button onClick={handleRefresh} className="refresh-button">
            🔄 Refresh Data
          </button>
        </div>
      </div>

      {error && (
        <div className="error-banner">
          <span>⚠️ {error}</span>
          <button onClick={handleRefresh}>Retry</button>
        </div>
      )}

      <div className="dashboard-container">
        {/* System Status Cards */}
        <div className="status-cards">
          <div className="status-card success">
            <div className="status-icon">✅</div>
            <div className="status-content">
              <h3>System Online</h3>
              <p>All services operational</p>
            </div>
          </div>

          <div className="status-card info">
            <div className="status-icon">🕐</div>
            <div className="status-content">
              <h3>Updated: {new Date().toLocaleTimeString()}</h3>
              <p>Last refresh timestamp</p>
            </div>
          </div>

          <div className="status-card primary">
            <div className="status-icon">👨‍💼</div>
            <div className="status-content">
              <h3>admin@mindfulme.com</h3>
              <p>Logged in as Administrator</p>
            </div>
          </div>
        </div>

        {/* Navigation Tabs */}
        <div className="admin-tabs">
          <button 
            className={`tab ${activeTab === 'overview' ? 'active' : ''}`}
            onClick={() => setActiveTab('overview')}
          >
            📊 Overview
          </button>
          <button 
            className={`tab ${activeTab === 'analytics' ? 'active' : ''}`}
            onClick={() => setActiveTab('analytics')}
          >
            📈 Analytics
          </button>
          <button 
            className={`tab ${activeTab === 'users' ? 'active' : ''}`}
            onClick={() => setActiveTab('users')}
          >
            👥 Users ({users.length})
          </button>
        </div>

        {/* Tab Content */}
        <div className="tab-content">
          {activeTab === 'overview' && (
            <div className="overview-tab">
              <div className="stats-grid">
                <div className="stat-card">
                  <div className="stat-header">
                    <h3>Total Users</h3>
                    <span className="stat-icon">👥</span>
                  </div>
                  <div className="stat-value">{stats.totalUsers}</div>
                  <div className="stat-change positive">+{stats.activeUsers} active</div>
                </div>

                <div className="stat-card">
                  <div className="stat-header">
                    <h3>Journal Entries</h3>
                    <span className="stat-icon">📝</span>
                  </div>
                  <div className="stat-value">{stats.totalJournalEntries}</div>
                  <div className="stat-change positive">Total written</div>
                </div>

                <div className="stat-card">
                  <div className="stat-header">
                    <h3>Breathing Sessions</h3>
                    <span className="stat-icon">🧘‍♀️</span>
                  </div>
                  <div className="stat-value">{stats.totalBreathingSessions}</div>
                  <div className="stat-change positive">Sessions completed</div>
                </div>

                <div className="stat-card">
                  <div className="stat-header">
                    <h3>Active Users</h3>
                    <span className="stat-icon">🟢</span>
                  </div>
                  <div className="stat-value">{stats.activeUsers}</div>
                  <div className="stat-change positive">Currently active</div>
                </div>
              </div>
            </div>
          )}

          {activeTab === 'analytics' && (
            <div className="analytics-tab">
              <div className="analytics-cards">
                <div className="analytics-card">
                  <h3>Platform Engagement</h3>
                  <div className="engagement-stats">
                    <div className="engagement-item">
                      <span>Average entries per user:</span>
                      <strong>{stats.totalUsers > 0 ? Math.round(stats.totalJournalEntries / stats.totalUsers * 100) / 100 : 0}</strong>
                    </div>
                    <div className="engagement-item">
                      <span>Average sessions per user:</span>
                      <strong>{stats.totalUsers > 0 ? Math.round(stats.totalBreathingSessions / stats.totalUsers * 100) / 100 : 0}</strong>
                    </div>
                    <div className="engagement-item">
                      <span>User activity rate:</span>
                      <strong>{stats.totalUsers > 0 ? Math.round((stats.activeUsers / stats.totalUsers) * 100) : 0}%</strong>
                    </div>
                  </div>
                </div>

                <div className="analytics-card">
                  <h3>Platform Health</h3>
                  <div className="health-indicators">
                    <div className="health-item">
                      <span className="health-dot success"></span>
                      <span>Database: Online</span>
                    </div>
                    <div className="health-item">
                      <span className="health-dot success"></span>
                      <span>API: Responsive</span>
                    </div>
                    <div className="health-item">
                      <span className="health-dot success"></span>
                      <span>Authentication: Active</span>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          )}

          {activeTab === 'users' && (
            <div className="users-tab">
              <div className="users-list">
                {users.length === 0 ? (
                  <div className="no-users">
                    <p>No users found</p>
                  </div>
                ) : (
                  users.map(user => (
                    <div key={user.id} className="user-card">
                      <div className="user-avatar">
                        {user.firstName?.charAt(0) || user.email.charAt(0)}
                      </div>
                      <div className="user-info">
                        <h4>{user.firstName && user.lastName ? `${user.firstName} ${user.lastName}` : user.email}</h4>
                        <p className="user-email">{user.email}</p>
                        <p className="user-role">{user.role}</p>
                      </div>
                      <div className="user-stats">
                        <span className="user-stat">
                          📝 {user.journalEntries?.length || 0} entries
                        </span>
                        <span className="user-stat">
                          🧘‍♀️ {user.breathingSessions?.length || 0} sessions
                        </span>
                      </div>
                      <div className="user-activity">
                        <span className={`activity-status ${user.activityLevel?.toLowerCase() || 'inactive'}`}>
                          {user.activityLevel || 'Inactive'}
                        </span>
                      </div>
                    </div>
                  ))
                )}
              </div>
            </div>
          )}
        </div>
      </div>
    </div>
  );
};

export default AdminDashboard;